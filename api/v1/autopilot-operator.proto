// autopilot-operator.proto defines the API Schema for the autopilot-operator.yaml configuration file.
// this file provides the bootstrap configuration that is loaded to the
// operator at boot-time/runtime
syntax = "proto3";
package autopilot;

import "google/protobuf/duration.proto";
import "google/protobuf/wrappers.proto";

option go_package = "github.com/solo-io/autopilot/api/v1";

// The AutopilotOperator file is the bootstrap
// Configuration file for the Operator.
// It is stored and mounted to the operator as a Kubernetes ConfigMap.
// The Operator will hot-reload when the configuration file changes.
// Default name is 'autopilot-operator.yaml' and should be stored in the project root.
message AutopilotOperator {
    // version of the operator
    // used for logging and metrics
    // default is "0.0.1"
    string version = 1;

    // meshProvider determines how the operator will connect to a service mesh
    // Default is "SMI"
    MeshProvider meshProvider = 2;

    // controlPlaneNs is the namespace the control plane lives in
    // Default is "istio-system"
    string controlPlaneNs = 3;

    // workInterval to sets the interval at which CRD workers resync.
    // Default is 5s
    google.protobuf.Duration workInterval = 4;

    // Serve metrics on this address. Set to empty string to disable metrics
    // defaults to ":9091"
    string metricsAddr = 5;

    // Enable leader election. This will prevent more than one operator from running at a time
    // defaults to true
    bool enableLeaderElection = 6;

    // if non-empty, watchNamespace will restrict the Operator to watching resources in a single namespace
    // if empty (default), the Operator must have Cluster-scope RBAC permissions (ClusterRole/Binding)
    // can also be set via the WATCH_NAMESPACE environment variable
    string watchNamespace = 7;

    // The namespace to use for Leader Election (requires read/write ConfigMap permissions)
    // defaults to the watchNamespace
    string leaderElectionNamespace = 8;

    // Log level for the operator's logger
    // values:
    // 0 - Debug
    // 1 - Info
    // 2 - Warn
    // 3 - Error
    // 4 - DPanic
    // 5 - Panic
    // 6 - Fatal
    // Defaults to Info
    google.protobuf.UInt32Value logLevel = 9;
}

// MeshProviders provide an interface to monitoring and managing a specific
// mesh.
// Autopilot does not abstract the mesh API - Autopilot developers must
// still reason able about Provider-specific CRDs. Autopilot's job is to
// abstract operational concerns such as discovering control plane configuration
// and monitoring metrics.
enum MeshProvider {
    // the Operator will utilize Istio mesh for metrics and configuration
    Istio = 0;

    // the Operator will utilize a locally deployed Prometheus instance for metrics
    // (Currently unimplemented)
    Custom = 1;
}