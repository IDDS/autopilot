// The following Schema defines the structure of the `autopilot.yaml` configuration file.
//
// This file is used to generate and re-generate the project structure, as well
// as execute tasks related to build and deployment. It can be consumed
// both via the `ap` CLI as well as in `codegen` packages.
syntax = "proto3";
package autopilot;

option go_package = "github.com/solo-io/autopilot/api/v1";

// The AutopilotProject file is the root configuration file for the project itself.
//
// This file will be used to build and deploy the autopilot operator.
// It is loaded automatically by the autopilot CLI. Its
// default location is 'autopilot.yaml'
message AutopilotProject {
    // the name (kubernetes Kind) of the top-level
    // CRD for the operator
    // Specified via the `ap init <Kind>` command
    string kind = 1;

    // the ApiVersion of the top-level
    // CRD for the operator
    string apiVersion = 2;

    // the name of the Operator
    // this is used to name and label loggers, k8s resources, and metrics exposed
    // by the operator. Should be [valid Kube resource names](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
    string operatorName = 3;

    // Each phase represents a different
    // stage in the lifecycle of the CRD (e.g. Pending/Succeeded/Failed).
    // <br>
    // Each phase specifies a unique name
    // and its own set of inputs and outputs.
    repeated Phase phases = 4;

    // enable use of a Finalizer to handle object deletion
    bool enableFinalizer = 5;

    // custom Parameters which extend Autopilot's builtin types
    repeated Parameter customParameters = 6;

    // custom Queries which extend Autopilot's metrics queries
    repeated MetricsQuery queries = 7;
}

// MeshProviders provide an interface to monitoring and managing a specific
// mesh.
//
// Autopilot does not abstract the mesh API - Autopilot developers must
// still reason able about Provider-specific CRDs. Autopilot's job is to
// abstract operational concerns such as discovering control plane configuration
// and monitoring metrics.
message Phase {
    // name of the phase. must be unique
    string name = 1;

    // description of the phase. used for comments and docs
    string description = 2;

    // indicates whether this is the initial phase of the system.
    // exactly one phase must be the initial phase
    bool initial = 3;

    // indicates whether this is a "final" or "resting" phase of the system.
    // when the CRD is in the final phase, no more processing will be done on it
    bool final = 4;

    // the set of inputs for this phase
    // the inputs will be retrieved by the scheduler
    // and passed to the worker as input parameters
    //
    // custom inputs can be defined in the
    // autopilot.yaml
    repeated string inputs = 5;

    // the set of outputs for this phase
    // the inputs will be propagated to k8s storage (etcd) by the scheduler.
    //
    // custom outputs can be defined in the
    // autopilot.yaml
    repeated string outputs = 6;
}

// Custom Parameters allow code to be generated
// for inputs/outputs that are not built-in to Autopilot.
// These types must be Kubernetes-compatible Go structs.
message Parameter {
    // the fully lower-case name of this resource
    // e.g. "pods", "services", "replicasets", "configmaps"
    string lowerName = 1;

    // the singular CamelCased name of the resource
    // equivalent to Kind
    string singleName = 2;

    // the plural CamelCased name of the resource
    // equivalent to the pluralized form of Kind
    string pluralName = 3;

    // import prefix used by generated code
    string importPrefix = 4;

    // go package (import path) to the go struct for the resource
    string package = 5;

    // Kubernetes API group for the resource
    // e.g. "networking.istio.io"
    string apiGroup = 6;

    // indicates whether the resource is a CRD
    // if true, the Resource will be added to the operator's runtime.Scheme
    bool isCrd = 7;
}

// MetricsQueries extend the query options available to workers.
// MetricsQueries are accessible to workers via generated client code
// that lives in <project root>/pkg/metrics
//
//
// The following MetricsQuery:
//
// ```
// name: success-rate
// parameters:
// - Name
// - Namespace
// - Interval
// queryTemplate: |
//     sum(
//         rate(
//             envoy_cluster_upstream_rq{
//                 kubernetes_namespace="{{ .Namespace }}",
//                 kubernetes_pod_name=~"{{ .Name }}-[0-9a-zA-Z]+(-[0-9a-zA-Z]+)",
//                 envoy_response_code!~"5.*"
//             }[{{ .Interval }}]
//         )
//     )
//     /
//     sum(
//         rate(
//             envoy_cluster_upstream_rq{
//                 kubernetes_namespace="{{ .Namespace }}",
//                 kubernetes_pod_name=~"{{ .Name }}-[0-9a-zA-Z]+(-[0-9a-zA-Z]+)"
//             }[{{ .Interval }}]
//         )
//     )
//     * 100
// ```
//
// would produce the following `metrics` Interface:
//
// ```go
// type CanaryDeploymentMetrics interface {
//     metrics.Client
//     GetIstioSuccessRate(ctx context.Context, Namespace, Name, Interval string) (*metrics.QueryResult, error)
//     GetIstioRequestDuration(ctx context.Context, Namespace, Name, Interval string) (*metrics.QueryResult, error)
//     GetEnvoySuccessRate(ctx context.Context, Namespace, Name, Interval string) (*metrics.QueryResult, error)
//     GetEnvoyRequestDuration(ctx context.Context, Namespace, Name, Interval string) (*metrics.QueryResult, error)
// }
// ```
message MetricsQuery {
    string name = 1;
    string queryTemplate = 2;
    repeated string parameters = 3;
}

